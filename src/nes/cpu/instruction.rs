
/// アドレッシングモード
#[derive(Debug, PartialEq)]
pub enum AddrMode {
    /// Aレジスタに対して演算を行い、Aレジスタに格納する。
    Accumulator,
    /// オペランドの16bitの即値との演算。
    Immediate,
    /// オペランドで16bitのアドレスを指定し、参照先の8bitの値と演算を行う。
    Absolute,
    /// オペランドで8bitのアドレスを指定し、参照先の8bitの値と演算を行う。
    ZeroPage,
    /// オペランドで指定した16bitのアドレスに、レジスタXの値を足して、
    /// そのアドレスが指す8bitの値に対して演算を行う。
    /// 最終アドレスが16bitの最大値を超えた場合は、溢れた分を無視する。
    IndexedAbsolute_X,
    /// オペランドで指定した16bitのアドレスに、レジスタYの値を足して、
    /// そのアドレスが指す8bitの値に対して演算を行う。
    /// 最終アドレスが16bitの最大値を超えた場合は、溢れた分を無視する。
    IndexedAbsolute_Y,
    /// オペランドで指定した8bitのアドレスに、レジスタX(一部の命令ではY)を加算して、
    /// そのアドレスが指す8bitの値に対して演算を行う。
    /// 算出したアドレスがゼロページ(0-255)を超過する、しないに関わらず、常に下位8bitの値しか見ない。
    IndexedZeroPage_X,
    /// オペランドで指定した8bitの値に、レジスタXの値を足して、ゼロページ内のアドレスを得る。
    /// 次に、このアドレスの指す8bitを下位アドレス、アドレス+1 の指す内容を上位8bitとして、
    /// 16bitの最終アドレスを得る。この最終アドレスの指す先の、8bitの値に対して操作を行う。
    /// なお、1段階目と2段階目で算出したアドレスが8bitを越える、越えないに関わらず、常に下位の8bitのみを見る。
    IndexedIndirect_X,
    /// オペランドで指定した8bitのアドレスを下位アドレス、アドレス+1 の指す内容を上位8bitとして、
    /// 16bitのアドレスを得る。このアドレスに、レジスタYの値を足して、最終アドレスを得る。
    /// 最終アドレスの指す先の8bitの値に対して操作を行う。
    /// なお、1段階目と2段階目で算出したアドレスが8bitを越える、越えないに関わらず、常に下位の8bitのみを見る。
    IndirectIndexed_Y,
    /// JMPでのみ使用。オペランドで指定した16bitのアドレスを下位8bit、
    /// そのアドレス+1 の指す内容を上位8bitとして、16bitのアドレスを得る。
    Indirect,
    /// 比較命令でのみ使用。現在のPCに8bitのオペランドを加算し、そのアドレスにジャンプする。
    /// なお、オペランドは符号ありの整数値として扱われる。
    Relative,
    /// 実行アドレスを必要としない命令。
    Implied,
}

#[derive(PartialEq)]
/// 最終的な演算結果を、レジスタに書き込むのか、それともメモリに書き込むのか。
pub enum Destination {
    /// レジスタに書き込む。NOPのような書き込み対象が存在しない命令や、
    /// レジスタ・メモリのどちらにも書き込む命令も、こちらに分類する。
    Register,
    /// メモリへ書き込む。
    Memory,
}